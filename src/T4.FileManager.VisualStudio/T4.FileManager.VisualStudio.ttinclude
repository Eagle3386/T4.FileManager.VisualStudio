<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Newtonsoft.Json" #>
<#+
    public class T4FileManager
    {
        /// <summary>Object for Visual Studio core automation.</summary>
        private readonly DTE _dte;

        /// <summary>Files to be generated.</summary>
        private readonly List<FileToGenerate> _filesToGenerate;

        /// <summary>Information about the generated files.</summary>
        private readonly GeneratedInfo _generatedInfo;

        /// <summary>The interface for the host that transforms text template.</summary>
        private readonly ITextTemplatingEngineHost _host;

        /// <summary>Code to generate as <see cref="StringBuilder" />.</summary>
        private readonly StringBuilder _textTransformation;

        /// <summary>Information about the current file to be generated.</summary>
        private FileToGenerate _currentFileToGenerate;

        /// <summary>Uniform header block for generating the files.</summary>
        private string _headerBlock;

        /// <summary>Information about the generated files step before.</summary>
        private GeneratedInfo _oldGeneratedInfo;

        /// <summary>Constructor for the instantiation of the FileManager.</summary>
        /// <param name="textTransformation">Code to generate as <see cref="StringBuilder" />.</param>
        /// <param name="host">The interface for the host that transforms text template.</param>
        public T4FileManager(StringBuilder textTransformation, ITextTemplatingEngineHost host, bool isInfoFileGenerationEnabled = true)
        {
            this._textTransformation = textTransformation;
            this._host = host;
            if (!(IsInfoFileGenerationEnabled = isInfoFileGenerationEnabled))
            {
                // The only working solution to prevent output file generation as of VS2019
                // See: https://stackoverflow.com/questions/2601202/how-not-to-output-default-t4-generated-file/13878689#13878689
                this._host.SetFileExtension("/");
            }

            this._filesToGenerate = new List<FileToGenerate>();
            this._generatedInfo = new GeneratedInfo();
            this._dte = GetHostServiceProvider();
        }

        /// <summary>Allow overwriting of files if it has already been generated.</summary>
        /// <value>Default value is true.</value>
        public bool CanOverwriteExistingFile { get; set; } = true;

        /// <summary>Automatic indentation of the code with ReSharper.</summary>
        /// <value>Default value is false.</value>
        public bool IsAutoCleanUpWithReSharperEnabled { get; set; } = false;

        /// <summary>Automatic indentation of the code.</summary>
        /// <value>Default value is false.</value>
        public bool IsAutoIndentEnabled { get; set; } = false;

        /// <summary>Generates a &lt;YourT4ScriptWithoutTTExtension&gt;.info.json file with details about generated files.</summary>
        /// <value>Default value is true.</value>
        public bool IsInfoFileGenerationEnabled { get; set; }

        /// <summary>Create instance of the FileManager.</summary>
        /// <param name="textTransformation">Code to generate as <see cref="StringBuilder" />.</param>
        public static T4FileManager Create(GeneratedTextTransformation textTransformation) =>
            new T4FileManager(textTransformation.GenerationEnvironment, textTransformation.Host);

        /// <summary>Empty header block.</summary>
        public void ClearHeader() => this._headerBlock = null;

        /// <summary>A new file will be started. The generated code that was before this method is added to the last file.</summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        public void CreateNewFile(string filename, string project, string path) => CreateNewFile(filename, project, path, null);

        /// <summary>A new file will be started. The generated code that was before this method is added to the last file.</summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        /// <param name="properties">Settings that can be defined for the generated file.</param>
        public void CreateNewFile(string filename, string project, string path, Dictionary<string, object> properties)
        {
            if (!string.IsNullOrEmpty(this._currentFileToGenerate?.Filename))
            {
                FinishFile();
            }

            this._currentFileToGenerate = new FileToGenerate
            {
                Filename = filename,
                Path = path?.Replace("/", @"\"),
                Project = project,
                Properties = properties ?? new Dictionary<string, object>()
            };

            this._textTransformation.Clear();
        }

        /// <summary>Alternative method to finish header block.</summary>
        public void EndBlock() => FinishHeader();

        /// <summary>The generated file is finished.</summary>
        public void FinishFile()
        {
            string directory = !string.IsNullOrEmpty(this._currentFileToGenerate.Project)
                                   ? this.GetProjectDirectoryPath(this._currentFileToGenerate.Project)
                                   : this.GetTemplateFileProjectDirectoryPath();
            if (!string.IsNullOrEmpty(this._currentFileToGenerate.Path))
            {
                directory = Path.Combine(directory, this._currentFileToGenerate.Path);
            }

            this._currentFileToGenerate.AbsolutePath = directory;
            this._currentFileToGenerate.Content = this._textTransformation.Insert(0, this._headerBlock).ToString();
            this._filesToGenerate.Add(this._currentFileToGenerate);

            this._textTransformation.Remove(0, this._textTransformation.Length);
            this._currentFileToGenerate = new FileToGenerate();
        }

        /// <summary>Set code as header block and empty code input.</summary>
        public void FinishHeader()
        {
            this._headerBlock = this._textTransformation.ToString();
            this._textTransformation.Remove(0, this._textTransformation.Length);
        }

        /// <summary>Files are generated. Old files are cleaned up. Info file is created.</summary>
        public void Generate()
        {
            if (!string.IsNullOrEmpty(this._currentFileToGenerate?.Filename))
            {
                FinishFile();
            }

            var templateFile = this._host.TemplateFile.Replace(".tt", ".info.json");
            if (File.Exists(templateFile))
            {
                this._oldGeneratedInfo = JsonConvert.DeserializeObject<GeneratedInfo>(File.ReadAllText(templateFile));
            }

            this._textTransformation.Clear();
            foreach (FileToGenerate fileToGenerate in this._filesToGenerate)
            {
                this.GenerateNewFile(fileToGenerate);
                this.GenerateNewFileForSolution(fileToGenerate);
            }

            this.DeleteExistingFiles();
            if (!IsInfoFileGenerationEnabled)
            {
                return;
            }

            this._generatedInfo.FilesToGenerate = this._filesToGenerate;
            File.WriteAllText(templateFile, JsonConvert.SerializeObject(this._generatedInfo, Formatting.Indented));
        }

        /// <summary>Automatic generation of the namespace for C#.</summary>
        /// <returns>The namespace as <see cref="string" />.</returns>
        public string GetNamespaceForCSharpCode()
        {
            string projectName = this._currentFileToGenerate.Project
                                 ?? _dte.Solution.FindProjectItem(this._host.TemplateFile).ContainingProject.Name;
            if (!string.IsNullOrEmpty(this._currentFileToGenerate.Path))
            {
                projectName = Path.Combine(projectName, this._currentFileToGenerate.Path);
            }

            return projectName.Replace(@"\", ".");
        }

        /// <summary><see cref="Generate" /></summary>
        public void Process() => this.Generate();

        /// <summary>Clear current code input for starting header block.</summary>
        public void StartHeader() => this._textTransformation.Clear();

        /// <summary>A new file will be started. The generated code that was before this method is added to the last file.</summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        public void StartNewFile(string filename, string project, string path) => StartNewFile(filename, project, path, null);

        /// <summary>A new file will be started. The generated code that was before this method is added to the last file.</summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        /// <param name="properties">Settings that can be defined for the generated file.</param>
        public void StartNewFile(string filename, string project, string path, FileProperties properties)
        {
            var propertyDictionary = new Dictionary<string, object>();
            properties = properties ?? new FileProperties();
            if (!string.IsNullOrEmpty(properties.CustomTool))
            {
                propertyDictionary.Add(Property.CustomTool, properties.CustomTool);
            }

            if (properties.BuildAction.HasValue)
            {
                propertyDictionary.Add(Property.BuildAction, properties.BuildAction);
            }

            foreach (KeyValuePair<string, object> prop in properties.TemplateParameter)
            {
                propertyDictionary.Add(prop.Key, prop.Value);
            }

            CreateNewFile(filename, project, path, propertyDictionary);
        }

        /// <summary>Adding a file to the solution (.NET Full Framework stuff).</summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <param name="absolutePath">Absolute path of file.</param>
        /// <param name="fileName">Filename with extension.</param>
        private void AddMissingFileToProject(string projectName, string absolutePath, string fileName)
        {
            if (!this.HasProjectItem(absolutePath, fileName))
            {
                this.FindProjectByName(projectName ?? _dte.Solution.FindProjectItem(this._host.TemplateFile).ContainingProject.Name)
                    .ProjectItems.AddFromFile(Path.Combine(absolutePath, fileName));
            }
        }

        /// <summary>Check whether a file may be overwritten.</summary>
        /// <param name="fileToGenerate">File information.</param>
        /// <returns>Overwriting allowed or not as <see cref="bool" />.</returns>
        private bool CanOverwriteExistingFileByFile(FileToGenerate fileToGenerate) =>
            !fileToGenerate.Properties.ContainsKey(Property.CanOverwriteExistingFile)
            || (fileToGenerate.Properties[Property.CanOverwriteExistingFile] as bool? != false);

        /// <summary>Clean up the old files.</summary>
        private void DeleteExistingFiles()
        {
            if (_oldGeneratedInfo?.FilesToGenerate is null || !this.CanOverwriteExistingFile)
            {
                return;
            }

            foreach (FileToGenerate file in this._oldGeneratedInfo.FilesToGenerate)
            {
                if (this._filesToGenerate.Any(fileToGenerate => fileToGenerate.Project.Equals(file.Project)
                                                                && fileToGenerate.Filename.Equals(file.Filename)
                                                                && fileToGenerate.Path.Equals(file.Path)
                                                                && CanOverwriteExistingFileByFile(fileToGenerate)))
                {
                    continue;
                }

                var directory = string.IsNullOrEmpty(file.Project)
                                    ? this.GetTemplateFileProjectDirectoryPath()
                                    : this.GetProjectDirectoryPath(file.Project);
                if (!string.IsNullOrEmpty(file.Path))
                {
                    directory = Path.Combine(directory, file.Path);
                }

                File.Delete(Path.Combine(directory, file.Filename));
                this.RemoveFileFromProject(directory, file.Filename);
            }
        }

        /// <summary>Execute Visual Studio commands.</summary>
        /// <param name="item"><see cref="ProjectItem" />.</param>
        /// <param name="commands">Commands as <see cref="string" />.</param>
        private void ExecuteVsCommand(ProjectItem item, params string[] commands)
        {
            if (item is null)
            {
                throw new ArgumentNullException(nameof(item));
            }

            Task.Factory.StartNew(() =>
            {
                if (item.IsOpen)
                {
                    item.Document.Close(vsSaveChanges.vsSaveChangesNo);
                }

                item.Open();
                foreach (string command in commands)
                {
                    if (string.IsNullOrWhiteSpace(command))
                    {
                        continue;
                    }

                    TryToExecuteCommand(item, command, false, 1);
                }

                item.Document.Close(vsSaveChanges.vsSaveChangesYes);
            });
        }

        /// <summary>Make sure that the project item is searched everywhere and that it is a project.</summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <returns><see cref="Project" />.</returns>
        private Project FindProjectByName(string projectName)
        {
            bool EqualsProjectName(Project project) => project.Name.Equals(projectName);

            List<Project> projects = this._dte.Solution.Projects.OfType<Project>().ToList();

            return projects.FirstOrDefault(EqualsProjectName)
                   ?? projects.FirstOrDefault(
                       project => project.ProjectItems
                                         .OfType<ProjectItem>()
                                         .Where(child => child.SubProject != null)
                                         .FirstOrDefault(child => EqualsProjectName(child.SubProject)) != null)
                   ?? throw new InvalidOperationException($"Project {projectName} not exists in the solution.");
        }

        /// <summary>Execute Visual Studio Format Document task.</summary>
        /// <param name="item"><see cref="ProjectItem" />.</param>
        private void FormatProjectItem(ProjectItem item) => this.ExecuteVsCommand(item, "Edit.FormatDocument");

        /// <summary>Execute Resharper cleanup task.</summary>
        /// <param name="item"><see cref="ProjectItem" />.</param>
        private void FormatProjectItemWithResharper(ProjectItem item) => this.ExecuteVsCommand(item, "ReSharper.ReSharper_SilentCleanupCode");

        /// <summary>Physical generation of the file.</summary>
        /// <param name="fileToGenerate">File information.</param>
        private void GenerateNewFile(FileToGenerate fileToGenerate)
        {
            Directory.CreateDirectory(fileToGenerate.AbsolutePath);

            if (IsAutoIndentEnabled || IsAutoCleanUpWithReSharperEnabled)
            {
                fileToGenerate.Content = fileToGenerate.Content.Insert(0, " ");
            }

            if ((CanOverwriteExistingFileByFile(fileToGenerate) && this.CanOverwriteExistingFile)
                || !File.Exists(Path.Combine(fileToGenerate.AbsolutePath, fileToGenerate.Filename)))
            {
                File.WriteAllText(Path.Combine(fileToGenerate.AbsolutePath, fileToGenerate.Filename), fileToGenerate.Content);
            }
        }

        /// <summary>Add file to the solution and execute the shortcuts (example: Resharper Clean Up).</summary>
        /// <param name="fileToGenerate">File information.</param>
        private void GenerateNewFileForSolution(FileToGenerate fileToGenerate)
        {
            this.AddMissingFileToProject(fileToGenerate.Project, fileToGenerate.AbsolutePath, fileToGenerate.Filename);
            if ((fileToGenerate.Properties is null
                 || !CanOverwriteExistingFileByFile(fileToGenerate)
                 || !this.CanOverwriteExistingFile)
                && this.HasProjectItem(fileToGenerate.AbsolutePath, fileToGenerate.Filename))
            {
                return;
            }

            ProjectItem fileProjectItem = _dte.Solution.FindProjectItem(fileToGenerate.Filename);
            fileToGenerate.Properties
                          ?.Where(property => !property.Key.Equals(Property.CanOverwriteExistingFile))
                          .ToList()
                          .ForEach(property => this.SetPropertyValue(fileProjectItem, property.Key, property.Value));

            if (IsAutoIndentEnabled)
            {
                this.FormatProjectItem(fileProjectItem);
            }

            if (IsAutoCleanUpWithReSharperEnabled)
            {
                this.FormatProjectItemWithResharper(fileProjectItem);
            }
        }

        /// <summary>Get interface for the host that transforms text template.</summary>
        /// <returns><see cref="_dte" /></returns>
        private DTE GetHostServiceProvider() =>
            this._host is IServiceProvider hostServiceProvider ? hostServiceProvider.GetCOMService(typeof(DTE)) as DTE : null;

        /// <summary>Get the path of the folder where project item is located.</summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <returns>Path as <see cref="string" />.</returns>
        private string GetProjectDirectoryPath(string projectName) =>
            Path.GetDirectoryName(this.FindProjectByName(projectName).FullName);

        /// <summary>Get the path of the folder where this file is located.</summary>
        /// <returns>Path as <see cref="string" />.</returns>
        private string GetTemplateFileProjectDirectoryPath() =>
            Path.GetDirectoryName(
                this.FindProjectByName(_dte.Solution.FindProjectItem(this._host.TemplateFile).ContainingProject.Name).FullName);

        /// <summary>Check if Project item exists.</summary>
        /// <param name="absolutePath">Absolute path of file.</param>
        /// <param name="fileName">Filename with extension.</param>
        /// <returns></returns>
        private bool HasProjectItem(string absolutePath, string fileName) =>
            _dte.Solution.FindProjectItem(Path.Combine(absolutePath, fileName)) != null;

        /// <summary>Remove Project item from the Solution.</summary>
        /// <param name="projectPath">Absolute path of project.</param>
        /// <param name="fileName">Filename with extension.</param>
        private void RemoveFileFromProject(string projectPath, string fileName) =>
            _dte.Solution.FindProjectItem(Path.Combine(projectPath, fileName))?.Remove();

        /// <summary>Set setting if available.</summary>
        /// <param name="projectItem"><see cref="ProjectItem" />.</param>
        /// <param name="propertyName">Property name as <see cref="string" />.</param>
        /// <param name="value">Value as <see cref="object" />.</param>
        private void SetPropertyValue(ProjectItem projectItem, string propertyName, object value)
        {
            if (projectItem.Properties.Item(propertyName) is EnvDTE.Property property)
            {
                property.Value = value;
            }
        }

        /// <summary>Recursive try to execute Visual Studio commands.</summary>
        /// <param name="item"><see cref="ProjectItem" />.</param>
        /// <param name="command">Command as <see cref="string" />.</param>
        /// <param name="finished">Evaluate whether command was executed.</param>
        /// <param name="attempt">Number of attempts.</param>
        private void TryToExecuteCommand(ProjectItem item, string command, bool finished, int attempt)
        {
            while (true)
            {
                System.Threading.Thread.Sleep(250);
                if (finished)
                {
                    return;
                }

                try
                {
                    item.Document.ActiveWindow.SetFocus();
                    _dte.ExecuteCommand(command, string.Empty);
                    finished = true;
                }
                catch (Exception exception)
                {
                    if (exception.Message.Contains("Command") && exception.Message.Contains("is not valid"))
                    {
                        return;
                    }

                    finished = false;
                }

                if (item.Document.Saved)
                {
                    finished = false;
                }

                if (attempt == 25)
                {
                    return;
                }

                attempt++;
            }
        }
    }

    /// <summary>Properties for project item</summary>
    public sealed class FileProperties
    {
        public FileProperties() => this.TemplateParameter = new Dictionary<string, object>();

        public int? BuildAction { get; set; }

        public string CustomTool { get; set; }

        public Dictionary<string, object> TemplateParameter { get; set; }

        internal string BuildActionString => this.BuildAction.ToString();
    }

    /// <summary>Predefined property values (BuildAction).</summary>
    public abstract class BuildAction
    {
        public const int Compile = 1;

        public const int Content = 2;

        public const int EmbeddedResource = 3;

        public const int None = 0;
    }

    /// <summary>Predefined property values (CanOverwriteExistingFile).</summary>
    public abstract class CanOverwriteExistingFile
    {
        public const bool No = false;

        public const bool Yes = true;
    }

    /// <summary>Predefined property values (CopyToOutputDirectory).</summary>
    public abstract class CopyToOutputDirectory
    {
        public const uint CopyAlways = 1;

        public const uint CopyIfNewer = 2;

        public const uint DoNotCopy = 0;
    }

    /// <summary>Predefined properties.</summary>
    public abstract class Property
    {
        public const string BuildAction = nameof(BuildAction);

        public const string CanOverwriteExistingFile = nameof(CanOverwriteExistingFile);

        public const string CopyToOutputDirectory = nameof(CopyToOutputDirectory);

        public const string CustomTool = nameof(CustomTool);
    }

    /// <summary>Info for a generated file.</summary>
    public class FileToGenerate
    {
        [JsonIgnore]
        public string AbsolutePath { get; set; }

        [JsonIgnore]
        public string Content { get; set; }

        public string Filename { get; set; }

        public string Path { get; set; }

        public string Project { get; set; }

        public Dictionary<string, object> Properties { get; set; }
    }

    /// <summary>Info wrapper of the generated files.</summary>
    public class GeneratedInfo
    {
        public List<FileToGenerate> FilesToGenerate { get; set; }
    }
#>
